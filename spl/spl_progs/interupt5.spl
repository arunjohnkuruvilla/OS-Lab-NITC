alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] *512) + (SP % 512);

//to get system call number
alias systemCallNo S1;
systemCallNo = [physicalSP - 1];

//get current PID
alias currentPID S7;
currentPID = (PTBR - 1024) / 8;

if(systemCallNo == 8) then
	alias i S2;
	alias freePCB S3;
	i = 1;
	freePCB = -1;

	//check Ready List of PCBs for free Block
	while (i < 32) do
		if([READY_LIST + i*32 + 1] == 0) then
			freePCB = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	if(freePCB == -1) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;

	//PID of new process is the index of the free PCB
	[READY_LIST + freePCB*32] = freePCB;

	//check for free pages in memory
	i = 0;
	alias count S4;
	count = 0;
	while (i < 4) do
		if([PTBR + i*2] != -1)then
			count = count + 1;
		endif;
		i = i + 1;
	endwhile;

	alias freePages S5;
	freePages = 0;
	i = 29;
	while(i<64) do
		if([MEM_LIST + i] == 0) then
			freePages = freePages + 1;
		endif;
		i = i + 1;
	endwhile;

	

	if(freePages < count) then
		[physicalSP - 2] = -3;								//not enough free pages in memory
		ireturn;
	endif;

	alias freePage S5;
	alias k S6;
	
	alias parentPage S10;
	i=0;
	while(i < 4) do	
		if(i == 2) then 
			i = i + 1;
			continue;
		endif;
		
		if([PTBR + i*2] != -1) then
			freePage=30;
			while(freePage < 64) do 
				if ([MEM_LIST + freePage] == 0) then
					break;
				endif;
				freePage = freePage + 1;
			endwhile;
			
			[MEM_LIST + freePage] = 1;
			parentPage = [PTBR + i*2];
			[PAGE_TABLE + (freePCB*8) + i*2] = freePage;
			[PAGE_TABLE + (freePCB*8) + i*2 + 1] = "01";
			k = 0;

			while(k < 512) do
				[freePage * 512 + k] = [parentPage * 512 + k];

				k = k + 1;
			endwhile;
		endif;
		i = i + 1;
	endwhile; 

	[READY_LIST + freePCB*32 + 2] = BP;
	[READY_LIST + freePCB*32 + 3] = SP - 1;
	[READY_LIST + freePCB*32 + 4] = [physicalSP];
	[READY_LIST + freePCB*32 + 5] = PAGE_TABLE + (freePCB*8);
	[READY_LIST + freePCB*32 + 6] = PTLR;
	[READY_LIST + freePCB*32 + 7] = R0;
	[READY_LIST + freePCB*32 + 8] = R1;
	[READY_LIST + freePCB*32 + 9] = R2;
	[READY_LIST + freePCB*32 + 10] = R3;
	[READY_LIST + freePCB*32 + 11] = R4;
	[READY_LIST + freePCB*32 + 12] = R5;
	[READY_LIST + freePCB*32 + 13] = R6;
	[READY_LIST + freePCB*32 + 14] = R7;
	[READY_LIST + freePCB*32 + 31] = currentPID;

	//copy per process open file table to child
	i=0;
	while(i < 8) do
		[READY_LIST + freePCB*32 + 15 + i*2] = [READY_LIST + currentPID*32 + 15 + i*2];
		
		[READY_LIST + freePCB*32 + 15 + i*2 + 1] = [READY_LIST + currentPID*32 + 15 + i*2 + 1] + 1;

		if([READY_LIST + currentPID*32 + 15 + i*2] != -1) then
			k = FILE_TABLE + [READY_LIST + freePCB*32 + 15 + i*2] + 1;
			[k] = [k] + 1;
		endif;

		i = i + 1;
	endwhile;

	[READY_LIST + freePCB*32 + 1] = 1;

	[physicalSP - 2] = freePCB;

	alias childSP S8;
	childSP = ([PAGE_TABLE + freePCB*8 + 2 * ((SP-1) / 512)] *512) + ((SP-1) % 512);

	[childSP - 1] = -2;
	ireturn;
endif;