alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] *512) + (SP % 512);

//to get system call number
alias systemCallNo S1;
systemCallNo = [physicalSP - 1];

//get current PID
alias currentPID S7;
currentPID = (PTBR - 1024) / 8;

if(systemCallNo == 8) then
	alias i S2;
	alias freePCB S3;
	i = 1;
	freePCB = -1;

	//check Ready List of PCBs for free Block
	while (i < 32) do
		if([READY_LIST + i*32 + 1] == 0) then
			freePCB = i;
			break;
		endif;
		i = i + 1;
	endwhile;
	if(freePCB == -1) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;

	//PID of new process is the index of the free PCB
	[READY_LIST + freePCB*32] = freePCB;

	alias freePage S5;
	freePage = -1;
	i = 0;
	while(i<64) do
		if([MEM_LIST + i] == 0) then
			freePage = i;
			break;
		endif;
		i = i + 1;
	endwhile;

	if(freePage == -1) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	
	[MEM_LIST + freePage] = 1;

	i = 0;
	while(i != 512) do
		[freePage * 512 + i] = [[PTBR + 6] * 512 + i];
		i = i + 1;
	endwhile;

	[PAGE_TABLE + (freePCB) * 8 + 6] = freePage;
	[PAGE_TABLE + (freePCB) * 8 + 7] = "01";

	i = 0;
	while(i != 3) do
		[PAGE_TABLE + (freePCB) * 8 + i * 2] = [PAGE_TABLE + (currentPID) * 8 + i * 2];
		[PAGE_TABLE + (freePCB) * 8 + i * 2 + 1] = [PAGE_TABLE + (currentPID) * 8 + i * 2 + 1];
		if([PAGE_TABLE + (currentPID) * 8 + i * 2 + 1] == "01" || [PAGE_TABLE + (currentPID) * 8 + i * 2 + 1] == "11") then
			[MEM_LIST + [PAGE_TABLE + (currentPID) * 8 + i * 2]] = [MEM_LIST + [PAGE_TABLE + (currentPID) * 8 + i * 2 + 1]]   ;
		else
			if([PAGE_TABLE + (currentPID) * 8 + i * 2] >= 448) then
				[DISK_LIST + [PAGE_TABLE + (currentPID) * 8 + i * 2]] = [DISK_LIST + [PAGE_TABLE + (currentPID) * 8 + i * 2]] + 1;
			endif;
		endif;
		i = i + 1;
	endwhile;
	
	store (6, 20); 	


	[READY_LIST + freePCB*32 + 2] = BP;
	[READY_LIST + freePCB*32 + 3] = SP - 1;
	[READY_LIST + freePCB*32 + 4] = [physicalSP];
	[READY_LIST + freePCB*32 + 5] = PAGE_TABLE + (freePCB*8);
	[READY_LIST + freePCB*32 + 6] = PTLR;
	[READY_LIST + freePCB*32 + 7] = R0;
	[READY_LIST + freePCB*32 + 8] = R1;
	[READY_LIST + freePCB*32 + 9] = R2;
	[READY_LIST + freePCB*32 + 10] = R3;
	[READY_LIST + freePCB*32 + 11] = R4;
	[READY_LIST + freePCB*32 + 12] = R5;
	[READY_LIST + freePCB*32 + 13] = R6;
	[READY_LIST + freePCB*32 + 14] = R7;
	[READY_LIST + freePCB*32 + 31] = currentPID;

	//copy per process open file table to child
	i=0;
	alias k S10;
	while(i < 8) do
		[READY_LIST + freePCB*32 + 15 + i*2] = [READY_LIST + currentPID*32 + 15 + i*2];
		
		[READY_LIST + freePCB*32 + 15 + i*2 + 1] = [READY_LIST + currentPID*32 + 15 + i*2 + 1] + 1;

		if([READY_LIST + currentPID*32 + 15 + i*2] != -1) then
			k = FILE_TABLE + [READY_LIST + freePCB*32 + 15 + i*2] + 1;
			[k] = [k] + 1;
		endif;

		i = i + 1;
	endwhile;

	[READY_LIST + freePCB*32 + 1] = 1;

	[physicalSP - 2] = freePCB;

	alias childSP S8;
	childSP = ([PAGE_TABLE + freePCB*8 + 2 * ((SP-1) / 512)] *512) + ((SP-1) % 512);

	[childSP - 1] = -2;
	ireturn;
endif;