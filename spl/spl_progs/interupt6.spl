alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] *512) + (SP % 512);

//to get system call number
alias systemCallNo S1;
systemCallNo = [physicalSP - 1];

alias arguement1 S2;
arguement1 = [physicalSP - 3];

if(systemCallNo == 9) then
	alias i S3;
	alias j S7;
	alias fileFATentry S4;
	fileFATentry = -1;
	i = 0;
	while(i < 64) do
		if ([FAT + i*8 + 1] == arguement1) then 
			fileFATentry = i;
			break;
		endif;
	endwhile;

	if(fileFATentry == -1) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;

	load (1, [FAT + fileFATentry*8 +2]);

	alias freeCodeBlocks S5;
	freeCodeBlocks = 0;
	i = 512;
	while ((i < 1024)&&([i] != -1)) do
		freeCodeBlocks = freeCodeBlocks + 1;
	    i = i+1;
	endwhile;

	alias codePages S6;
	codePages = 0;
	i = 0;
	while (i < 4) do
		if ([PTBR + i*2] != -1) then
			codePages = codePages+1;
		else
			break;
		endif;
		i = i+1;
	endwhile;

	if(codePages > freeCodeBlocks) then
		i = codePages;
		while(i < freeCodeBlocks) do
			[1280 + [PTBR + i*2]] = 0;
			[PTBR + i*2] = -1;
			[PTBR + i*2 + 1] = "00";
			i = i + 1;
		endwhile;
	endif;

	if (freeCodeBlocks > codePages) then
		i = 30;
		j = codePages;
		while((j < freeCodeBlocks) && (i < 64)) do
			if ([MEM_LIST + i] == 0) then
				j = j+1;
			endif;
			i = i+1;
		endwhile;
		if (freeCodeBlocks > codePages) then
			[physicalSP-2] = -2;
			ireturn;
		endif;

		i = 30;
		j = codePages;
		while((j < freeCodeBlocks) && (i < 64)) do
			if ([MEM_LIST + i]==0) then
				[MEM_LIST + i] = 1;
				[PTBR + 2*j] = i;
				[PTBR + 2*j + 1] = "01";
				j = j+1;
			endif;
			i = i+1;
		endwhile;
	endif;

	i = 0;
	while(i < 3) do
		[PTBR + i*2] = [512 + i];
		i = i + 1;
	endwhile;

	//get current PID
	alias currentPID S9;
	currentPID = (PTBR - 1024) / 8;

	while(i < 8) do
		alias SYStableEntry S10;
		SYStableEntry = [1536 + currentPID*32 + 15 + i*2];	
		if([FILE_TABLE + SYStableEntry*2 + 1] > 0) then
			[FILE_TABLE + SYStableEntry*2 + 1] = [FILE_TABLE + SYStableEntry*2 + 1] - 1;
		endif;

		if([FILE_TABLE + SYStableEntry*2 + 1] == 0) then
			[FILE_TABLE + SYStableEntry*2] = -1;
		endif;

		[1536 + currentPID*32 + 15 + i*2] = -1;
		[1536 + currentPID*32 + 15 + i*2 + 1] = -1;
		i = i + 1;
	endwhile;

	SP = 3 * 512;

	physicalSP = ([PTBR + 2 * (SP / 512)] *512) + (SP % 512);

	[physicalSP] = 0;
	ireturn;
endif;