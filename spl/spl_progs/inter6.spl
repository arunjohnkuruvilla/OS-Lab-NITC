alias physicalSP S0;
physicalSP = ([PTBR + 2 * (SP / 512)] *512) + (SP % 512);

//to get system call number
alias systemCallNo S1;
systemCallNo = [physicalSP - 1];

alias arguement1 S2;
arguement1 = [physicalSP - 3];

//get current PID
alias currentPID S11;
currentPID = (PTBR - 1024) / 8;

if(systemCallNo == 9) then
	alias i S3;
	alias fileFATentry S4;
	alias freePage S5;
	alias freePCB S6;

	fileFATentry = -1;
	i = 0;
	while(i < 64) do
		if ([FAT + i*8] == arguement1) then 
			fileFATentry = i;											//FAT entry found
			break;
		endif;
		i = i + 1;
	endwhile;

	if(fileFATentry == -1) then
		[physicalSP - 2] = -4;											//if FAT entry not found
		ireturn;
	endif;

	i = 0;
	//check Ready List of PCBs for free Block
	while (i < 32) do
		if([READY_LIST + i*32 + 1] == 0) then
			freePCB = i;												//if free PCB block found
			break;
		endif;
		i = i + 1;
	endwhile;

	if(freePCB == -1) then
		[physicalSP - 2] = -1;											//if no free PCB block found
		ireturn;
	endif;


	[READY_LIST + freePCB*32] = freePCB;								//PID is the PCB index

	load (1, [FAT + fileFATentry*8 + 2]);

	//search MEM_LIST for free block
	
	freePage = -1;
	i = 0;
	while(i<64) do
		if([MEM_LIST + i] == 0) then
			freePage = i;												//if freePage for stack is found
			break;
		endif;
		i = i + 1;
	endwhile;

	if(freePage == -1) then
		[physicalSP - 2] = -1;											//if no freePage is found
		ireturn;
	endif;
	
	[MEM_LIST + freePage] = 1;

	[PAGE_TABLE + (freePCB) * 8 + 6] = freePage;
	[PAGE_TABLE + (freePCB) * 8 + 7] = "01";

	i = 0;
	while(i != 3) do
		if([512 + i] != -1) then
			[PAGE_TABLE + (freePCB * 8) + i * 2] = [512 + i];
			[PAGE_TABLE + (freePCB * 8) + i * 2 + 1] = "00";
			[DISK_LIST + [512 + i]] = [DISK_LIST + [512 + i]] + 1;
		endif;
		i = i + 1;
	endwhile;

	store (6, 20); 


	[READY_LIST + currentPID*32 + 1] = 100 + freePCB;

	[READY_LIST + currentPID*32 + 2] = BP;
	[READY_LIST + currentPID*32 + 3] = SP - 1;
	[READY_LIST + currentPID*32 + 4] = [physicalSP];
	[READY_LIST + currentPID*32 + 5] = PTBR;
	[READY_LIST + currentPID*32 + 6] = PTLR;
	[READY_LIST + currentPID*32 + 7] = R0;
	[READY_LIST + currentPID*32 + 8] = R1;
	[READY_LIST + currentPID*32 + 9] = R2;
	[READY_LIST + currentPID*32 + 10] = R3;
	[READY_LIST + currentPID*32 + 11] = R4;
	[READY_LIST + currentPID*32 + 12] = R5;
	[READY_LIST + currentPID*32 + 13] = R6;
	[READY_LIST + currentPID*32 + 14] = R7;

	i = 0;
	while(i < 8) do
		[1536 + currentPID*32 + 15 + i*2] = -1;
		[1536 + currentPID*32 + 15 + i*2 + 1] = -1;
		i = i + 1;
	endwhile;

	PTBR = 1024 + freePCB * 8;

	SP = 3 * 512;

	[READY_LIST + freePCB*32 + 1] = 2;	


	physicalSP = ([PTBR + 2 * (SP / 512)] *512) + (SP % 512);

	[physicalSP] = 0;
	[physicalSP - 2] = 0;

	ireturn;

endif;

if(systemCallNo == 11) then
	[physicalSP - 2] = (PTBR - 1024) / 8;
	ireturn;
endif;

if(systemCallNo == 12) then
	[physicalSP - 2] = [READY_LIST + ((PTBR - 1024) / 8)*32 + 31];
	ireturn;
endif;